package cache

import (
	"github.com/Carou/models"
	"github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

// DownvoteTopic provides a mock function with given fields: topic
func (_m *MockCache) DownvoteTopic(topic models.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}


func (_m *MockCache) OnDownvoteTopic() *mock.Call {
	return _m.On("DownvoteTopic", mock.AnythingOfType("models.Topic"))
}

// GetTopicByTopic provides a mock function with given fields:
func (_m *MockCache) GetTopics(pageSize int) ([]models.Topic, error) {
	ret := _m.Called(pageSize)

	var r0 []models.Topic
	if rf, ok := ret.Get(0).(func(int) []models.Topic); ok {
		r0 = rf(pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnGetTopic provides a helper function for users to mock
func (_m *MockCache) OnGetTopics() *mock.Call {
	return _m.On("GetTopics", mock.AnythingOfType("int"))
}

// UpvoteTopic provides a mock function with given fields: topic
func (_m *MockCache) UpvoteTopic(topic models.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *MockCache) OnUpvoteTopic() *mock.Call {
	return _m.On("UpvoteTopic", mock.AnythingOfType("models.Topic"))
}
