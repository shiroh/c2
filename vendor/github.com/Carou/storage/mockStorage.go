package storage

import (
	"github.com/Carou/models"
	"github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the MockStorage type
type MockStorage struct {
	mock.Mock
}

// CreateTopic provides a mock function with given fields: topic
func (_m *MockStorage) CreateTopic(topic models.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnCreateTopic provides a helper function for users to mock
func (_m *MockStorage) OnCreateTopic() *mock.Call {
	return _m.On("CreateTopic", mock.AnythingOfType("models.Topic"))
}

// DownvoteTopic provides a mock function with given fields: topic
func (_m *MockStorage) DownvoteTopic(topic models.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnDownvoteTopic provides a helper function for users to mock
func (_m *MockStorage) OnDownvoteTopic() *mock.Call {
	return _m.On("DownvoteTopic", mock.AnythingOfType("models.Topic"))
}

// GetTopic provides a mock function with given fields: pagesize, sortType, sortDir
func (_m *MockStorage) GetTopicByVotes(pagesize int) ([]models.Topic, error) {
	ret := _m.Called(pagesize)

	var r0 []models.Topic
	if rf, ok := ret.Get(0).(func(int) []models.Topic); ok {
		r0 = rf(pagesize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(pagesize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnGetTopic provides a helper function for users to mock
func (_m *MockStorage) OnGetTopicByVotes() *mock.Call {
	return _m.On("GetTopicByVotes", mock.AnythingOfType("int"))
}

// UpvoteTopic provides a mock function with given fields: topic
func (_m *MockStorage) UpvoteTopic(topic models.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnUpvoteTopic provides a helper function for users to mock
func (_m *MockStorage) OnUpvoteTopic() *mock.Call {
	return _m.On("UpvoteTopic", mock.AnythingOfType("models.Topic"))
}

var _ Storage = (*MockStorage)(nil)
